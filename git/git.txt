GitHub:
* Multiple developers involved in application development.
* Application developers will be working from different locations

In this situation we dace two problems:
---------------------------------------
1.How to integrate source code?
2. How to monitor changes happening to source code?

Repository:
----------
where our code will be stored and documents related project.

* Every developer will install a client software in their system.
* Client software is used to interact with version control software.

Developer-->client software--> version control software

It provides solution for 2 problems:
version control software server : will be on different system.

url,username and password--> for repository.
image: 1.git

* there are several VCS softwares available:
        1.CVS
		2.clear case
		3.SVN (Sub Version)
		*4.Git Hub
		*5.Git Bucket.
GitHub:
------
* It is a provider of internet hosting for software developement and version control using Git.
   It offers the distributed version control and source management functionality of Git + its own features.
   * cloud Platform
   * Microsoft owned
 * Github is a cloud provider which is providing software version control managemnt using git.
 * Git hub is implemented in Ruby and it is under license of microsoft.
 * Using GitHub we can maintain repositories in cloud platform.
 * In order to create repositories we need to have account in github.
 
 Github-- build, ship and maintain their software on github.
 
 Sign up to Github.
 Repositories--2:
 ------------
 *public and private.
 
Task:
* create a github account and create repository.
repo url :https://github.com/AkhilGorantlaAG/GitHubLearn.git

Github connection:
Git client, GitLab etc.,

Git:
* Download git client software.
  git-scm.com/downloads and install it.
* To communicate with github repositories. we will use gut client software.
* git client is available in multiple ways:
   *git bash
   *git GUI
   *source tree etc.,
Task:
* create a empty folder git practise in your system.
* establish communication between folder and repository.
   open folder 
   git bash--> git init
                      wiill create a hidden file .git
			   * Create a simple hello world java program.
			   * git status
			            will get status of all files.
						status -untracked: means file newly created.
				* git add FileName
				         will add the new file. it will be added to staging area.
				* git status
				* git commit -m 'message'
				          will be commited to github.
				* git branch -M main
				          should commit to main branch in git
				* git remote add origin url_of_repo
				           need to run  only once it add url.
				         check config file before and after add origin we can find that remote url will be added.
				* git push -u origin branchname
                  git push -u origin main
				
Git commands:
------------
* git init
* git add <fileName>
* git commit -m 'message'
* git branch -M main	
* git remote add origin <repo-URl>
* git push -u origin main

* check config folder for remote origin url.
* .git --> is a hidden folder.

Git Bash Commands:
-----------------
1.init
2.clone
3.add
4.status
5.commit
6.push 
7.pull
8.checkout
9.reset
10.log
11.rm
12.branchmerge
13.rebase
14.stash

We are having several git commands to perform operations with git repository.

Git Bash Commands:
-----------------
git help
--------
   gives list of all commands 
git help <cmd-name> --> It opens documentation of that particular command.
-------------------
git init:
-------
   It is used to create empty repository or reinitialize the existing repository.
   creates hidden folder .git
git status:
----------
    This command will display the status of the current repository.
	Staged Files:
	------------
	   Files which are added and they are ready to commit.
	    Green color 
	Un-Staged Files:
	---------------
	      Modified Files will be displayed here, we needto satge these files to commit
		  Red color
	Un-Tracked Files:
	      Newly created files, we need to stage them to commit.
		    These file names also will be displayed in red color.

git add:
-------
   This command is used to add file to staging area.
       Syntax : git add <fileName>
                git add --a
                        --a to add all new files at a time.
git rm:
------
 git rm --cached <file>
 git rm --cached *
    to unstage files all files
git commit:
---------
 git commit -m 'message'
It will commit files to our local system only.
It will not commit to central repository.
Git Repository will be available in our machine.
When we execute commit command it will consider all the files which are in staging area.

git remote add origin <url-of-git>: To add URL
----------------------------------
It needed only for fisrt time.

git push -u origin master:
-------------------------
It is used to push the changes from local repository to central repository.
git reset:
--------
to unstage a file

git init :
-------
   To initialize our folder as git operations folder.
git status:
---------
   To see staged, un-staged and un-tracked files.
   * staged - Eligible for commit.
   * unstaged - Modified but not eligible for commit.
   * untracked - Newly created files.
git add<filename>:
-----------------
    To add file(s) to staging area.
git add --a:
------------
	To add all modified files at a time.
git commit -m <msg>:
-------------------
     To commit staged files to local repo.
git remote add origin <repo-url>:
--------------------------------
     To connect our folder to remote repo.
git push:
--------
     To push changes from local repo to central repo.
git rm --cache<filename>:
------------------------
     To unstage files.
git clone <url>:
--------------
	To clone project from central repo to local system.
git pull:
---------
    To take latest changes from central repo to local repo.
git checkout <file-name>:
-----------------------
    To replace local file with central repo file.
git log :
--------
     To see commit history.

* Add Java File in git folder
